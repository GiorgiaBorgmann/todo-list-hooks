{"version":3,"sources":["components/Item/Item.js","components/Total/Total.js","components/List/List.js","api.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["Item","toDoTask","dispatch","className","type","checked","completeToDo","onChange","actions","payload","id","completed","value","toDoText","data-testid","e","editText","target","Total","listToDos","useContext","TotalContext","counter","i","length","countCompletedTasks","addTask","React","createContext","List","useState","userInput","setUserInput","loading","setLoading","useReducer","action","newToDo","map","item","Math","random","handleAdd","event","a","preventDefault","Promise","resolve","setTimeout","console","error","disabled","onClick","Provider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.567a5c67.chunk.js","sourcesContent":["import { actions } from \"../List/List\";\nimport './Item.css'\n\nexport function Item({ toDoTask, dispatch }) {\n  return (\n    <div className=\"item-container\">\n      <input\n        type=\"checkbox\"\n        checked={toDoTask.completeToDo}\n        \n        onChange={() =>\n          dispatch({\n            type: actions.completeToDo,\n            payload: { id: toDoTask.id },\n          })\n        }\n      />\n      <input\n        className={\n          toDoTask.completed\n            ? 'todo-text-done'\n            : 'todo-text'\n        }\n        id={toDoTask.id}\n        value={toDoTask.toDoText}\n        data-testid={\"toDoTask-input\"}\n        onChange={(e)=> \n        dispatch({type: actions.editText, payload: {toDoText: e.target.value, id: toDoTask.id }})}\n      > \n      </input>\n    </div>\n  );\n}\n","import { useContext } from \"react\";\nimport { TotalContext } from \"../List/List\";\n\nexport function Total() {\n  const listToDos = useContext(TotalContext);\n  const countCompletedTasks = (listToDos) => {\n    let counter = 0;\n    if (listToDos) {\n      for (let i = 0; i < listToDos.length; i++) {\n        if (listToDos[i].completed === true) {\n          counter++;\n        }\n      }\n    }\n    return counter;\n  };\n  return (\n    <div>\n      Total: {countCompletedTasks(listToDos)}/{listToDos && listToDos.length}\n    </div>\n  );\n}\n","import { Item } from \"../Item/Item\";\nimport \"./List.css\";\nimport { Total } from \"../Total/Total\";\nimport { callToServer } from \"../../api\";\nimport React, { useState, useReducer } from \"react\";\n\nexport const actions = {\n  addTask: \"addTask\",\n  completeToDo: \"completeToDo\",\n  editText: \"editText\",\n};\n\nexport const TotalContext = React.createContext();\n\nexport function List() {\n  const [userInput, setUserInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const reducer = (listToDos, action) => {\n    switch (action.type) {\n      case actions.addTask:\n        return [...listToDos, newToDo(action.payload.userInput)];\n      case actions.completeToDo:\n        return listToDos.map((item) => {\n          if (item.id === action.payload.id) {\n            return { ...item, completeToDo: !item.completeToDo };\n          }\n          return item;\n        });\n      case actions.editText:\n        return listToDos.map((item) => {\n          if (item.id === action.payload.id) {\n            return { ...item, toDoText: action.payload.toDoText };\n          }\n          return item;\n        });\n      default:\n        return listToDos;\n    }\n  };\n\n  const [listToDos, dispatch] = useReducer(reducer, []);\n\n  function newToDo(userInput) {\n    const newToDo = {\n      id: Math.random(),\n      toDoText: userInput,\n      completeToDo: false,\n    };\n    return newToDo;\n  }\n\n  const handleAdd = async (event) => {\n    try {\n      event.preventDefault();\n      setLoading(true);\n      await callToServer();\n      dispatch({ type: actions.addTask, payload: { userInput: userInput } });\n      setUserInput(\"\");\n      setLoading(false);\n    } catch {\n      return console.error();\n    }\n  };\n  return (\n    <>\n      <div className=\"form\">\n        <input\n          data-testid={\"todo-input\"}\n          type=\"text\"\n          value={userInput}\n          onChange={(event) => setUserInput(event.target.value)}\n        />\n        <button disabled={userInput === \"\"} onClick={handleAdd}>{loading ? \"\u001dAdding...\":\"Add\"}</button>\n      </div>\n      <div className=\"list\" data-testid={\"todo-list\"}>\n        {listToDos.map((item) => (\n          <Item key={item.id} toDoTask={item} dispatch={dispatch} />\n        ))}\n      </div>\n      <TotalContext.Provider value={listToDos}>\n        <Total />\n      </TotalContext.Provider>\n    </>\n  );\n}\n","export function callToServer() {\n  return new Promise((resolve) => setTimeout(() => {\n    resolve();\n  }, 2000));\n}","import { List } from \"../List/List\";\nimport \"./App.css\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>My to do list</h1>\n      <List />\n    </div>\n  );\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}